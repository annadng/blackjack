"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@aws";
exports.ids = ["vendor-chunks/@aws"];
exports.modules = {

/***/ "(rsc)/./node_modules/@aws/lambda-invoke-store/dist/invoke-store.js":
/*!********************************************************************!*\
  !*** ./node_modules/@aws/lambda-invoke-store/dist/invoke-store.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InvokeStore = void 0;\nconst async_hooks_1 = __webpack_require__(/*! async_hooks */ \"async_hooks\");\n// AWS_LAMBDA_NODEJS_NO_GLOBAL_AWSLAMBDA provides an escape hatch since we're modifying the global object which may not be expected to a customer's handler.\nconst noGlobalAwsLambda = process.env[\"AWS_LAMBDA_NODEJS_NO_GLOBAL_AWSLAMBDA\"] === \"1\" ||\n    process.env[\"AWS_LAMBDA_NODEJS_NO_GLOBAL_AWSLAMBDA\"] === \"true\";\nif (!noGlobalAwsLambda) {\n    globalThis.awslambda = globalThis.awslambda || {};\n}\nconst PROTECTED_KEYS = {\n    REQUEST_ID: Symbol(\"_AWS_LAMBDA_REQUEST_ID\"),\n    X_RAY_TRACE_ID: Symbol(\"_AWS_LAMBDA_X_RAY_TRACE_ID\"),\n};\n/**\n * InvokeStore implementation class\n */\nclass InvokeStoreImpl {\n    static storage = new async_hooks_1.AsyncLocalStorage();\n    // Protected keys for Lambda context fields\n    static PROTECTED_KEYS = PROTECTED_KEYS;\n    /**\n     * Initialize and run code within an invoke context\n     */\n    static run(context, fn) {\n        return this.storage.run({ ...context }, fn);\n    }\n    /**\n     * Get the complete current context\n     */\n    static getContext() {\n        return this.storage.getStore();\n    }\n    /**\n     * Get a specific value from the context by key\n     */\n    static get(key) {\n        const context = this.storage.getStore();\n        return context?.[key];\n    }\n    /**\n     * Set a custom value in the current context\n     * Protected Lambda context fields cannot be overwritten\n     */\n    static set(key, value) {\n        if (this.isProtectedKey(key)) {\n            throw new Error(`Cannot modify protected Lambda context field`);\n        }\n        const context = this.storage.getStore();\n        if (context) {\n            context[key] = value;\n        }\n    }\n    /**\n     * Get the current request ID\n     */\n    static getRequestId() {\n        return this.get(this.PROTECTED_KEYS.REQUEST_ID) ?? \"-\";\n    }\n    /**\n     * Get the current X-ray trace ID\n     */\n    static getXRayTraceId() {\n        return this.get(this.PROTECTED_KEYS.X_RAY_TRACE_ID);\n    }\n    /**\n     * Check if we're currently within an invoke context\n     */\n    static hasContext() {\n        return this.storage.getStore() !== undefined;\n    }\n    /**\n     * Check if a key is protected (readonly Lambda context field)\n     */\n    static isProtectedKey(key) {\n        return (key === this.PROTECTED_KEYS.REQUEST_ID ||\n            key === this.PROTECTED_KEYS.X_RAY_TRACE_ID);\n    }\n}\nlet instance;\nif (!noGlobalAwsLambda && globalThis.awslambda?.InvokeStore) {\n    instance = globalThis.awslambda.InvokeStore;\n}\nelse {\n    instance = InvokeStoreImpl;\n    if (!noGlobalAwsLambda && globalThis.awslambda) {\n        globalThis.awslambda.InvokeStore = instance;\n    }\n}\nexports.InvokeStore = instance;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF3cy9sYW1iZGEtaW52b2tlLXN0b3JlL2Rpc3QvaW52b2tlLXN0b3JlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQjtBQUNuQixzQkFBc0IsbUJBQU8sQ0FBQyxnQ0FBYTtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsWUFBWTtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbm5hZGFuZy9EZXNrdG9wL1Byb2plY3RzL2JsYWNramFjay9ibGFja2phY2stZ2FtZS9ub2RlX21vZHVsZXMvQGF3cy9sYW1iZGEtaW52b2tlLXN0b3JlL2Rpc3QvaW52b2tlLXN0b3JlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5JbnZva2VTdG9yZSA9IHZvaWQgMDtcbmNvbnN0IGFzeW5jX2hvb2tzXzEgPSByZXF1aXJlKFwiYXN5bmNfaG9va3NcIik7XG4vLyBBV1NfTEFNQkRBX05PREVKU19OT19HTE9CQUxfQVdTTEFNQkRBIHByb3ZpZGVzIGFuIGVzY2FwZSBoYXRjaCBzaW5jZSB3ZSdyZSBtb2RpZnlpbmcgdGhlIGdsb2JhbCBvYmplY3Qgd2hpY2ggbWF5IG5vdCBiZSBleHBlY3RlZCB0byBhIGN1c3RvbWVyJ3MgaGFuZGxlci5cbmNvbnN0IG5vR2xvYmFsQXdzTGFtYmRhID0gcHJvY2Vzcy5lbnZbXCJBV1NfTEFNQkRBX05PREVKU19OT19HTE9CQUxfQVdTTEFNQkRBXCJdID09PSBcIjFcIiB8fFxuICAgIHByb2Nlc3MuZW52W1wiQVdTX0xBTUJEQV9OT0RFSlNfTk9fR0xPQkFMX0FXU0xBTUJEQVwiXSA9PT0gXCJ0cnVlXCI7XG5pZiAoIW5vR2xvYmFsQXdzTGFtYmRhKSB7XG4gICAgZ2xvYmFsVGhpcy5hd3NsYW1iZGEgPSBnbG9iYWxUaGlzLmF3c2xhbWJkYSB8fCB7fTtcbn1cbmNvbnN0IFBST1RFQ1RFRF9LRVlTID0ge1xuICAgIFJFUVVFU1RfSUQ6IFN5bWJvbChcIl9BV1NfTEFNQkRBX1JFUVVFU1RfSURcIiksXG4gICAgWF9SQVlfVFJBQ0VfSUQ6IFN5bWJvbChcIl9BV1NfTEFNQkRBX1hfUkFZX1RSQUNFX0lEXCIpLFxufTtcbi8qKlxuICogSW52b2tlU3RvcmUgaW1wbGVtZW50YXRpb24gY2xhc3NcbiAqL1xuY2xhc3MgSW52b2tlU3RvcmVJbXBsIHtcbiAgICBzdGF0aWMgc3RvcmFnZSA9IG5ldyBhc3luY19ob29rc18xLkFzeW5jTG9jYWxTdG9yYWdlKCk7XG4gICAgLy8gUHJvdGVjdGVkIGtleXMgZm9yIExhbWJkYSBjb250ZXh0IGZpZWxkc1xuICAgIHN0YXRpYyBQUk9URUNURURfS0VZUyA9IFBST1RFQ1RFRF9LRVlTO1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemUgYW5kIHJ1biBjb2RlIHdpdGhpbiBhbiBpbnZva2UgY29udGV4dFxuICAgICAqL1xuICAgIHN0YXRpYyBydW4oY29udGV4dCwgZm4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZS5ydW4oeyAuLi5jb250ZXh0IH0sIGZuKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjb21wbGV0ZSBjdXJyZW50IGNvbnRleHRcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0Q29udGV4dCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZS5nZXRTdG9yZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgYSBzcGVjaWZpYyB2YWx1ZSBmcm9tIHRoZSBjb250ZXh0IGJ5IGtleVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQoa2V5KSB7XG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLnN0b3JhZ2UuZ2V0U3RvcmUoKTtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQ/LltrZXldO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgYSBjdXN0b20gdmFsdWUgaW4gdGhlIGN1cnJlbnQgY29udGV4dFxuICAgICAqIFByb3RlY3RlZCBMYW1iZGEgY29udGV4dCBmaWVsZHMgY2Fubm90IGJlIG92ZXJ3cml0dGVuXG4gICAgICovXG4gICAgc3RhdGljIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmlzUHJvdGVjdGVkS2V5KGtleSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IG1vZGlmeSBwcm90ZWN0ZWQgTGFtYmRhIGNvbnRleHQgZmllbGRgKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5zdG9yYWdlLmdldFN0b3JlKCk7XG4gICAgICAgIGlmIChjb250ZXh0KSB7XG4gICAgICAgICAgICBjb250ZXh0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGN1cnJlbnQgcmVxdWVzdCBJRFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRSZXF1ZXN0SWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldCh0aGlzLlBST1RFQ1RFRF9LRVlTLlJFUVVFU1RfSUQpID8/IFwiLVwiO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGN1cnJlbnQgWC1yYXkgdHJhY2UgSURcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0WFJheVRyYWNlSWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldCh0aGlzLlBST1RFQ1RFRF9LRVlTLlhfUkFZX1RSQUNFX0lEKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgd2UncmUgY3VycmVudGx5IHdpdGhpbiBhbiBpbnZva2UgY29udGV4dFxuICAgICAqL1xuICAgIHN0YXRpYyBoYXNDb250ZXh0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdG9yYWdlLmdldFN0b3JlKCkgIT09IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgYSBrZXkgaXMgcHJvdGVjdGVkIChyZWFkb25seSBMYW1iZGEgY29udGV4dCBmaWVsZClcbiAgICAgKi9cbiAgICBzdGF0aWMgaXNQcm90ZWN0ZWRLZXkoa2V5KSB7XG4gICAgICAgIHJldHVybiAoa2V5ID09PSB0aGlzLlBST1RFQ1RFRF9LRVlTLlJFUVVFU1RfSUQgfHxcbiAgICAgICAgICAgIGtleSA9PT0gdGhpcy5QUk9URUNURURfS0VZUy5YX1JBWV9UUkFDRV9JRCk7XG4gICAgfVxufVxubGV0IGluc3RhbmNlO1xuaWYgKCFub0dsb2JhbEF3c0xhbWJkYSAmJiBnbG9iYWxUaGlzLmF3c2xhbWJkYT8uSW52b2tlU3RvcmUpIHtcbiAgICBpbnN0YW5jZSA9IGdsb2JhbFRoaXMuYXdzbGFtYmRhLkludm9rZVN0b3JlO1xufVxuZWxzZSB7XG4gICAgaW5zdGFuY2UgPSBJbnZva2VTdG9yZUltcGw7XG4gICAgaWYgKCFub0dsb2JhbEF3c0xhbWJkYSAmJiBnbG9iYWxUaGlzLmF3c2xhbWJkYSkge1xuICAgICAgICBnbG9iYWxUaGlzLmF3c2xhbWJkYS5JbnZva2VTdG9yZSA9IGluc3RhbmNlO1xuICAgIH1cbn1cbmV4cG9ydHMuSW52b2tlU3RvcmUgPSBpbnN0YW5jZTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@aws/lambda-invoke-store/dist/invoke-store.js\n");

/***/ })

};
;