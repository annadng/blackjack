"use strict";exports.id=696,exports.ids=[696],exports.modules={8211:(a,b,c)=>{c.d(b,{a:()=>g,v:()=>h});var d=c(29021),e=c(31448);let{readFile:f}=d.promises,g={},h=async a=>{if(g[a])return g[a];let b=(0,e.C)(a);return JSON.parse(await f(b,"utf8"))}},31448:(a,b,c)=>{c.d(b,{C:()=>g});var d=c(55511),e=c(33873),f=c(57943);let g=a=>{let b=(0,d.createHash)("sha1").update(a).digest("hex");return(0,e.join)((0,f.R)(),".aws","sso","cache",`${b}.json`)}},61315:(a,b,c)=>{c.d(b,{fromSSO:()=>B});var d=c(35450),e=c(1231),f=c(231),g=c(7446),h=c(51436),i=c(44062);let j=a=>Object.entries(a).filter(([a])=>a.startsWith(h.I.SSO_SESSION+i.Q)).reduce((a,[b,c])=>({...a,[b.substring(b.indexOf(i.Q)+1)]:c}),{});var k=c(33382),l=c(55811);let m=()=>({}),n=async(a={})=>(0,l.$H)(a.configFilepath??(0,g.g)()).then(k.A).then(j).catch(m);var o=c(82854),p=c(74660);class q extends p.m{name="TokenProviderError";constructor(a,b=!0){super(a,b),Object.setPrototypeOf(this,q.prototype)}}var r=c(8211);let s="To refresh this SSO session run 'aws sso login' with the corresponding profile.",t=async(a,b={})=>{let{SSOOIDCClient:d}=await c.e(123).then(c.bind(c,25123));return new d(Object.assign({},b.clientConfig??{},{region:a??b.clientConfig?.region,logger:b.clientConfig?.logger??b.parentClientConfig?.logger}))},u=async(a,b,d={})=>{let{CreateTokenCommand:e}=await c.e(123).then(c.bind(c,25123));return(await t(b,d)).send(new e({clientId:a.clientId,clientSecret:a.clientSecret,refreshToken:a.refreshToken,grantType:"refresh_token"}))},v=a=>{if(a.expiration&&a.expiration.getTime()<Date.now())throw new q(`Token is expired. ${s}`,!1)},w=(a,b,c=!1)=>{if(void 0===b)throw new q(`Value not present for '${a}' in SSO Token${c?". Cannot refresh":""}. ${s}`,!1)};var x=c(31448);let{writeFile:y}=c(29021).promises,z=new Date(0),A=async({ssoStartUrl:a,ssoSession:b,ssoAccountId:g,ssoRegion:h,ssoRoleName:i,ssoClient:j,clientConfig:k,parentClientConfig:l,profile:m,filepath:p,configFilepath:t,ignoreCache:A,logger:B})=>{let C,D,E="To refresh this SSO session run aws sso login with the corresponding profile.";if(b)try{let a=await ((a={})=>async({callerClientConfig:b}={})=>{let c,d={...a,parentClientConfig:{...b,...a.parentClientConfig}};d.logger?.debug("@aws-sdk/token-providers - fromSso");let g=await (0,f.Y)(d),h=(0,e.Bz)({profile:d.profile??b?.profile}),i=g[h];if(i){if(!i.sso_session)throw new q(`Profile '${h}' is missing required property 'sso_session'.`)}else throw new q(`Profile '${h}' could not be found in shared credentials file.`,!1);let j=i.sso_session,k=(await n(d))[j];if(!k)throw new q(`Sso session '${j}' could not be found in shared credentials file.`,!1);for(let a of["sso_start_url","sso_region"])if(!k[a])throw new q(`Sso session '${j}' is missing required property '${a}'.`,!1);k.sso_start_url;let l=k.sso_region;try{c=await (0,r.v)(j)}catch(a){throw new q(`The SSO session token associated with profile=${h} was not found or is invalid. ${s}`,!1)}w("accessToken",c.accessToken),w("expiresAt",c.expiresAt);let{accessToken:m,expiresAt:o}=c,p={token:m,expiration:new Date(o)};if(p.expiration.getTime()-Date.now()>3e5)return p;if(Date.now()-z.getTime()<3e4)return v(p),p;w("clientId",c.clientId,!0),w("clientSecret",c.clientSecret,!0),w("refreshToken",c.refreshToken,!0);try{z.setTime(Date.now());let a=await u(c,l,d);w("accessToken",a.accessToken),w("expiresIn",a.expiresIn);let b=new Date(Date.now()+1e3*a.expiresIn);try{await ((a,b)=>{let c=(0,x.C)(a);return y(c,JSON.stringify(b,null,2))})(j,{...c,accessToken:a.accessToken,expiresAt:b.toISOString(),refreshToken:a.refreshToken})}catch(a){}return{token:a.accessToken,expiration:b}}catch(a){return v(p),p}})({profile:m,filepath:p,configFilepath:t,ignoreCache:A})();C={accessToken:a.token,expiresAt:new Date(a.expiration).toISOString()}}catch(a){throw new d.C(a.message,{tryNextLink:!1,logger:B})}else try{C=await (0,r.v)(a)}catch(a){throw new d.C(`The SSO session associated with this profile is invalid. ${E}`,{tryNextLink:!1,logger:B})}if(new Date(C.expiresAt).getTime()-Date.now()<=0)throw new d.C(`The SSO session associated with this profile has expired. ${E}`,{tryNextLink:!1,logger:B});let{accessToken:F}=C,{SSOClient:G,GetRoleCredentialsCommand:H}=await c.e(740).then(c.bind(c,93740)),I=j||new G(Object.assign({},k??{},{logger:k?.logger??l?.logger,region:k?.region??h}));try{D=await I.send(new H({accountId:g,roleName:i,accessToken:F}))}catch(a){throw new d.C(a,{tryNextLink:!1,logger:B})}let{roleCredentials:{accessKeyId:J,secretAccessKey:K,sessionToken:L,expiration:M,credentialScope:N,accountId:O}={}}=D;if(!J||!K||!L||!M)throw new d.C("SSO returns an invalid temporary credential.",{tryNextLink:!1,logger:B});let P={accessKeyId:J,secretAccessKey:K,sessionToken:L,expiration:new Date(M),...N&&{credentialScope:N},...O&&{accountId:O}};return b?(0,o.g)(P,"CREDENTIALS_SSO","s"):(0,o.g)(P,"CREDENTIALS_SSO_LEGACY","u"),P},B=(a={})=>async({callerClientConfig:b}={})=>{a.logger?.debug("@aws-sdk/credential-provider-sso - fromSSO");let{ssoStartUrl:c,ssoAccountId:g,ssoRegion:h,ssoRoleName:i,ssoSession:j}=a,{ssoClient:k}=a,l=(0,e.Bz)({profile:a.profile??b?.profile});if(c||g||h||i||j)if(c&&g&&h&&i)return A({ssoStartUrl:c,ssoSession:j,ssoAccountId:g,ssoRegion:h,ssoRoleName:i,ssoClient:k,clientConfig:a.clientConfig,parentClientConfig:a.parentClientConfig,profile:l,filepath:a.filepath,configFilepath:a.configFilepath,ignoreCache:a.ignoreCache,logger:a.logger});else throw new d.C('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"',{tryNextLink:!1,logger:a.logger});{let b=(await (0,f.Y)(a))[l];if(!b)throw new d.C(`Profile ${l} was not found.`,{logger:a.logger});if(!(a=>a&&("string"==typeof a.sso_start_url||"string"==typeof a.sso_account_id||"string"==typeof a.sso_session||"string"==typeof a.sso_region||"string"==typeof a.sso_role_name))(b))throw new d.C(`Profile ${l} is not configured with SSO credentials.`,{logger:a.logger});if(b?.sso_session){let e=(await n(a))[b.sso_session],f=` configurations in profile ${l} and sso-session ${b.sso_session}`;if(h&&h!==e.sso_region)throw new d.C("Conflicting SSO region"+f,{tryNextLink:!1,logger:a.logger});if(c&&c!==e.sso_start_url)throw new d.C("Conflicting SSO start_url"+f,{tryNextLink:!1,logger:a.logger});b.sso_region=e.sso_region,b.sso_start_url=e.sso_start_url}let{sso_start_url:e,sso_account_id:g,sso_region:i,sso_role_name:j,sso_session:m}=((a,b)=>{let{sso_start_url:c,sso_account_id:e,sso_region:f,sso_role_name:g}=a;if(!c||!e||!f||!g)throw new d.C(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(a).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,{tryNextLink:!1,logger:b});return a})(b,a.logger);return A({ssoStartUrl:e,ssoSession:m,ssoAccountId:g,ssoRegion:i,ssoRoleName:j,ssoClient:k,clientConfig:a.clientConfig,parentClientConfig:a.parentClientConfig,profile:l,filepath:a.filepath,configFilepath:a.configFilepath,ignoreCache:a.ignoreCache,logger:a.logger})}}}};