"use strict";exports.id=548,exports.ids=[167,548],exports.modules={231:(a,b,c)=>{c.d(b,{Y:()=>e});var d=c(44062);let e=async a=>{let b=await (0,d.p)(a);return((...a)=>{let b={};for(let c of a)for(let[a,d]of Object.entries(c))void 0!==b[a]?Object.assign(b[a],d):b[a]=d;return b})(b.configFile,b.credentialsFile)}},8211:(a,b,c)=>{c.d(b,{a:()=>g,v:()=>h});var d=c(29021),e=c(31448);let{readFile:f}=d.promises,g={},h=async a=>{if(g[a])return g[a];let b=(0,e.C)(a);return JSON.parse(await f(b,"utf8"))}},10247:(a,b,c)=>{c.d(b,{Z:()=>f});var d=c(8211),e=c(55811);let f={getFileRecord:()=>e.Jj,interceptFile(a,b){e.Jj[a]=Promise.resolve(b)},getTokenRecord:()=>d.a,interceptToken(a,b){d.a[a]=b}}},31448:(a,b,c)=>{c.d(b,{C:()=>g});var d=c(55511),e=c(33873),f=c(57943);let g=a=>{let b=(0,d.createHash)("sha1").update(a).digest("hex");return(0,e.join)((0,f.R)(),".aws","sso","cache",`${b}.json`)}},62548:(a,b,c)=>{c.r(b),c.d(b,{fromProcess:()=>l});var d=c(231),e=c(1231),f=c(35450),g=c(10247),h=c(79646),i=c(28354),j=c(82854);let k=async(a,b,c)=>{let d=b[a];if(b[a]){let e=d.credential_process;if(void 0!==e){let d=(0,i.promisify)(g.Z?.getTokenRecord?.().exec??h.exec);try{let c,{stdout:f}=await d(e);try{c=JSON.parse(f.trim())}catch{throw Error(`Profile ${a} credential_process returned invalid JSON.`)}return((a,b,c)=>{if(1!==b.Version)throw Error(`Profile ${a} credential_process did not return Version 1.`);if(void 0===b.AccessKeyId||void 0===b.SecretAccessKey)throw Error(`Profile ${a} credential_process returned invalid credentials.`);if(b.Expiration){let c=new Date;if(new Date(b.Expiration)<c)throw Error(`Profile ${a} credential_process returned expired credentials.`)}let d=b.AccountId;!d&&c?.[a]?.aws_account_id&&(d=c[a].aws_account_id);let e={accessKeyId:b.AccessKeyId,secretAccessKey:b.SecretAccessKey,...b.SessionToken&&{sessionToken:b.SessionToken},...b.Expiration&&{expiration:new Date(b.Expiration)},...b.CredentialScope&&{credentialScope:b.CredentialScope},...d&&{accountId:d}};return(0,j.g)(e,"CREDENTIALS_PROCESS","w"),e})(a,c,b)}catch(a){throw new f.C(a.message,{logger:c})}}throw new f.C(`Profile ${a} did not contain credential_process.`,{logger:c})}throw new f.C(`Profile ${a} could not be found in shared credentials file.`,{logger:c})},l=(a={})=>async({callerClientConfig:b}={})=>{a.logger?.debug("@aws-sdk/credential-provider-process - fromProcess");let c=await (0,d.Y)(a);return k((0,e.Bz)({profile:a.profile??b?.profile}),c,a.logger)}}};