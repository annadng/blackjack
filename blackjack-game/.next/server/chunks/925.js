"use strict";exports.id=925,exports.ids=[925],exports.modules={16925:(a,b,c)=>{c.d(b,{fromHttp:()=>z});var d=c(82854),e=c(97950),f=c(35450),g=c(79748),h=c.n(g),i=c(42414),j=c(33645),k=c(61453),l=c(27832),m=c(27910),n=c(66709);let o=async a=>"function"==typeof Blob&&a instanceof Blob||a.constructor?.name==="Blob"?void 0!==Blob.prototype.arrayBuffer?new Uint8Array(await a.arrayBuffer()):p(a):q(a);async function p(a){var b;let c=await (b=a,new Promise((a,c)=>{let d=new FileReader;d.onloadend=()=>{if(2!==d.readyState)return c(Error("Reader aborted too early"));let b=d.result??"",e=b.indexOf(","),f=e>-1?e+1:b.length;a(b.substring(f))},d.onabort=()=>c(Error("Read aborted")),d.onerror=()=>c(d.error),d.readAsDataURL(b)}));return new Uint8Array((0,n.E)(c))}async function q(a){let b=[],c=a.getReader(),d=!1,e=0;for(;!d;){let{done:a,value:f}=await c.read();f&&(b.push(f),e+=f.length),d=a}let f=new Uint8Array(e),g=0;for(let a of b)f.set(a,g),g+=a.length;return f}var r=c(45352),s=c(74434),t=c(99872);let u=a=>"function"==typeof ReadableStream&&(a?.constructor?.name===ReadableStream.name||a instanceof ReadableStream),v="The stream has already been transformed.",w=a=>"function"==typeof Blob&&a instanceof Blob,x="The stream has already been transformed.";async function y(a,b){let c=(a=>{if(!(a instanceof m.Readable))try{var b=a;if(!w(b)&&!u(b)){let a=b?.__proto__?.constructor?.name||b;throw Error(`Unexpected stream implementation, expect Blob or ReadableStream, got ${a}`)}let c=!1,d=async()=>{if(c)throw Error(v);return c=!0,await o(b)};return Object.assign(b,{transformToByteArray:d,transformToString:async a=>{let b=await d();if("base64"===a)return(0,r.n)(b);if("hex"===a)return(0,s.n)(b);if(void 0===a||"utf8"===a||"utf-8"===a)return(0,t.P)(b);if("function"==typeof TextDecoder)return new TextDecoder(a).decode(b);throw Error("TextDecoder is not available, please make sure polyfill is provided.")},transformToWebStream:()=>{if(c)throw Error(v);if(c=!0,w(b)){var a=b;if("function"!=typeof a.stream)throw Error("Cannot transform payload Blob to web stream. Please make sure the Blob.stream() is polyfilled.\nIf you are using React Native, this API is not yet supported, see: https://react-native.canny.io/feature-requests/p/fetch-streaming-body");return a.stream()}if(u(b))return b;throw Error(`Cannot transform payload to web stream, got ${b}`)}})}catch(c){let b=a?.__proto__?.constructor?.name||a;throw Error(`Unexpected stream implementation, expect Stream.Readable instance, got ${b}`)}let c=!1,d=async()=>{if(c)throw Error(x);return c=!0,await (0,k.k)(a)};return Object.assign(a,{transformToByteArray:d,transformToString:async a=>{let b=await d();return void 0===a||Buffer.isEncoding(a)?(0,l.Q)(b.buffer,b.byteOffset,b.byteLength).toString(a):new TextDecoder(a).decode(b)},transformToWebStream:()=>{if(c)throw Error(x);if(null!==a.readableFlowing)throw Error("The stream has been consumed by other callbacks.");if("function"!=typeof m.Readable.toWeb)throw Error("Readable.toWeb() is not supported. Please ensure a polyfill is available.");return c=!0,m.Readable.toWeb(a)}})})(a.body),d=await c.transformToString();if(200===a.statusCode){let a=JSON.parse(d);if("string"!=typeof a.AccessKeyId||"string"!=typeof a.SecretAccessKey||"string"!=typeof a.Token||"string"!=typeof a.Expiration)throw new f.C("HTTP credential provider response not of the required format, an object matching: { AccessKeyId: string, SecretAccessKey: string, Token: string, Expiration: string(rfc3339) }",{logger:b});return{accessKeyId:a.AccessKeyId,secretAccessKey:a.SecretAccessKey,sessionToken:a.Token,expiration:(0,j.EI)(a.Expiration)}}if(a.statusCode>=400&&a.statusCode<500){let c={};try{c=JSON.parse(d)}catch(a){}throw Object.assign(new f.C(`Server responded with status: ${a.statusCode}`,{logger:b}),{Code:c.Code,Message:c.Message})}throw new f.C(`Server responded with status: ${a.statusCode}`,{logger:b})}let z=(a={})=>{let b;a.logger?.debug("@aws-sdk/credential-provider-http - fromHttp");let c=a.awsContainerCredentialsRelativeUri??process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI,g=a.awsContainerCredentialsFullUri??process.env.AWS_CONTAINER_CREDENTIALS_FULL_URI,j=a.awsContainerAuthorizationToken??process.env.AWS_CONTAINER_AUTHORIZATION_TOKEN,k=a.awsContainerAuthorizationTokenFile??process.env.AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE,l=a.logger?.constructor?.name!=="NoOpLogger"&&a.logger?.warn?a.logger.warn.bind(a.logger):console.warn;if(c&&g&&(l("@aws-sdk/credential-provider-http: you have set both awsContainerCredentialsRelativeUri and awsContainerCredentialsFullUri."),l("awsContainerCredentialsFullUri will take precedence.")),j&&k&&(l("@aws-sdk/credential-provider-http: you have set both awsContainerAuthorizationToken and awsContainerAuthorizationTokenFile."),l("awsContainerAuthorizationToken will take precedence.")),g)b=g;else if(c)b=`http://169.254.170.2${c}`;else throw new f.C(`No HTTP credential provider host provided.
Set AWS_CONTAINER_CREDENTIALS_FULL_URI or AWS_CONTAINER_CREDENTIALS_RELATIVE_URI.`,{logger:a.logger});let m=new URL(b);((a,b)=>{if("https:"!==a.protocol&&"169.254.170.2"!==a.hostname&&"169.254.170.23"!==a.hostname&&"[fd00:ec2::23]"!==a.hostname){if(a.hostname.includes("[")){if("[::1]"===a.hostname||"[0000:0000:0000:0000:0000:0000:0000:0001]"===a.hostname)return}else{if("localhost"===a.hostname)return;let b=a.hostname.split("."),c=a=>{let b=parseInt(a,10);return 0<=b&&b<=255};if("127"===b[0]&&c(b[1])&&c(b[2])&&c(b[3])&&4===b.length)return}throw new f.C(`URL not accepted. It must either be HTTPS or match one of the following:
  - loopback CIDR 127.0.0.0/8 or [::1/128]
  - ECS container host 169.254.170.2
  - EKS container host 169.254.170.23 or [fd00:ec2::23]`,{logger:b})}})(m,a.logger);let n=e.$.create({requestTimeout:a.timeout??1e3,connectionTimeout:a.timeout??1e3});return((a,b,c)=>async()=>{for(let d=0;d<b;++d)try{return await a()}catch(a){await new Promise(a=>setTimeout(a,c))}return await a()})(async()=>{let b=function(a){return new i.K({protocol:a.protocol,hostname:a.hostname,port:Number(a.port),path:a.pathname,query:Array.from(a.searchParams.entries()).reduce((a,[b,c])=>(a[b]=c,a),{}),fragment:a.hash})}(m);j?b.headers.Authorization=j:k&&(b.headers.Authorization=(await h().readFile(k)).toString());try{let a=await n.handle(b);return y(a.response).then(a=>(0,d.g)(a,"CREDENTIALS_HTTP","z"))}catch(b){throw new f.C(String(b),{logger:a.logger})}},a.maxRetries??3,a.timeout??1e3)}},33645:(a,b,c)=>{c.d(b,{EI:()=>g,t_:()=>i});var d=c(57098);let e=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],f=new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/),g=a=>{if(null==a)return;if("string"!=typeof a)throw TypeError("RFC-3339 date-times must be expressed as strings");let b=f.exec(a);if(!b)throw TypeError("Invalid RFC-3339 date-time value");let[c,e,g,h,i,k,l,m]=b,o=(0,d.zi)(q(e));return j(o,n(g,"month",1,12),n(h,"day",1,31),{hours:i,minutes:k,seconds:l,fractionalMilliseconds:m})},h=new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?(([-+]\d{2}\:\d{2})|[zZ])$/),i=a=>{if(null==a)return;if("string"!=typeof a)throw TypeError("RFC-3339 date-times must be expressed as strings");let b=h.exec(a);if(!b)throw TypeError("Invalid RFC-3339 date-time value");let[c,e,f,g,i,k,l,m,o]=b,r=(0,d.zi)(q(e)),s=j(r,n(f,"month",1,12),n(g,"day",1,31),{hours:i,minutes:k,seconds:l,fractionalMilliseconds:m});return"Z"!=o.toUpperCase()&&s.setTime(s.getTime()-p(o)),s},j=(a,b,c,d)=>{let e=b-1;return l(a,e,c),new Date(Date.UTC(a,e,c,n(d.hours,"hour",0,23),n(d.minutes,"minute",0,59),n(d.seconds,"seconds",0,60),o(d.fractionalMilliseconds)))},k=[31,28,31,30,31,30,31,31,30,31,30,31],l=(a,b,c)=>{let d=k[b];if(1===b&&m(a)&&(d=29),c>d)throw TypeError(`Invalid day for ${e[b]} in ${a}: ${c}`)},m=a=>a%4==0&&(a%100!=0||a%400==0),n=(a,b,c,e)=>{let f=(0,d.tW)(q(a));if(f<c||f>e)throw TypeError(`${b} must be between ${c} and ${e}, inclusive`);return f},o=a=>null==a?0:1e3*(0,d.UO)("0."+a),p=a=>{let b=a[0],c=1;if("+"==b)c=1;else if("-"==b)c=-1;else throw TypeError(`Offset direction, ${b}, must be "+" or "-"`);return c*(60*Number(a.substring(1,3))+Number(a.substring(4,6)))*6e4},q=a=>{let b=0;for(;b<a.length-1&&"0"===a.charAt(b);)b++;return 0===b?a:a.slice(b)}}};