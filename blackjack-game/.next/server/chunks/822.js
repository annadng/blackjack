"use strict";exports.id=822,exports.ids=[822],exports.modules={8211:(a,b,c)=>{c.d(b,{a:()=>g,v:()=>h});var d=c(29021),e=c(31448);let{readFile:f}=d.promises,g={},h=async a=>{if(g[a])return g[a];let b=(0,e.C)(a);return JSON.parse(await f(b,"utf8"))}},10247:(a,b,c)=>{c.d(b,{Z:()=>f});var d=c(8211),e=c(55811);let f={getFileRecord:()=>e.Jj,interceptFile(a,b){e.Jj[a]=Promise.resolve(b)},getTokenRecord:()=>d.a,interceptToken(a,b){d.a[a]=b}}},31448:(a,b,c)=>{c.d(b,{C:()=>g});var d=c(55511),e=c(33873),f=c(57943);let g=a=>{let b=(0,d.createHash)("sha1").update(a).digest("hex");return(0,e.join)((0,f.R)(),".aws","sso","cache",`${b}.json`)}},78822:(a,b,c)=>{c.r(b),c.d(b,{fromTokenFile:()=>j,fromWebToken:()=>h});var d=c(82854),e=c(35450),f=c(10247),g=c(29021);let h=a=>async b=>{a.logger?.debug("@aws-sdk/credential-provider-web-identity - fromWebToken");let{roleArn:d,roleSessionName:e,webIdentityToken:f,providerId:g,policyArns:h,policy:i,durationSeconds:j}=a,{roleAssumerWithWebIdentity:k}=a;if(!k){let{getDefaultRoleAssumerWithWebIdentity:d}=await Promise.all([c.e(67),c.e(558)]).then(c.bind(c,58558));k=d({...a.clientConfig,credentialProviderLogger:a.logger,parentClientConfig:{...b?.callerClientConfig,...a.parentClientConfig}},a.clientPlugins)}return k({RoleArn:d,RoleSessionName:e??`aws-sdk-js-session-${Date.now()}`,WebIdentityToken:f,ProviderId:g,PolicyArns:h,Policy:i,DurationSeconds:j})},i="AWS_WEB_IDENTITY_TOKEN_FILE",j=(a={})=>async()=>{a.logger?.debug("@aws-sdk/credential-provider-web-identity - fromTokenFile");let b=a?.webIdentityTokenFile??process.env[i],c=a?.roleArn??process.env.AWS_ROLE_ARN,j=a?.roleSessionName??process.env.AWS_ROLE_SESSION_NAME;if(!b||!c)throw new e.C("Web identity configuration not specified",{logger:a.logger});let k=await h({...a,webIdentityToken:f.Z?.getTokenRecord?.()[b]??(0,g.readFileSync)(b,{encoding:"ascii"}),roleArn:c,roleSessionName:j})();return b===process.env[i]&&(0,d.g)(k,"CREDENTIALS_ENV_VARS_STS_WEB_ID_TOKEN","h"),k}}};